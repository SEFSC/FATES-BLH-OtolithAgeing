---
title: Getting Started
subtitle: Creating and configuration a Python virtual environment
metadata-files:
  - ../../_metadata.yml
order: 1
---

:::{.callout-note}
The instructions on this page only need to be carried out once. If you have already installed the required dependencies and created a virtual environment, skip ahead to [Using the Model](usage.qmd).
:::

Much of the following is carried out using command line. In the instructions below, "command line terminal" or "terminal" refer to any command line application for the given operating system. For Windows, this is commonly Command Prompt or Windows Powershell. These use DOS commands. For UNIX users, Git Bash is a good alternative; it is included in [Git for Windows](#git) and allows UNIX commands to be used instead of DOS.

### Software Installation

#### git

If the [Git CLI](https://git-scm.com/downloads) is already installed, there should be a Git Bash program in your Applications. If so, open this program and verify everything is working by typing

```bash
git --version
```

This should display the version of git installed on the system.

:::{.callout-note}
This should already be installed for all users on the Advanced Technology GPU machine.
:::

If needed, download and install the [Git CLI](https://git-scm.com/downloads) before continuing. This does not need administrative privileges to install at the user level. Confirm that it has been installed by opening a command line terminal and entering `git --version`.

#### conda

Download and install [Anaconda](https://www.anaconda.com/).

:::{.callout-note}
This is already installed on the Advanced Technology GPU machine, but it may need to be set up for each user. Keep reading to learn more.
:::

Verify installation and configuration of Anaconda using a command line terminal:

```bash
conda --version
```

If Anaconda is configured properly, this should print the version of the installed software. If, instead, it returns a "command not found" error, and you know Anaconda has been installed, you most likely need to [add Conda to your path variables](https://stackoverflow.com/questions/44597662/conda-command-is-not-recognized-on-windows-10) so that your operating system knows where to find it. First, find where it was installed, and then, in Windows:

1. In the Windows taskbar, search for "environment" and select "Edit environmental variables for your account"
2. In the top panel of the window that opens, click the "Path" user variable, then select "Edit...".
3. You need to add two new paths, one at a time. Click "New" and enter the full path (starting with "C:\") of the directory containing Anaconda. This may, for example, be `C:\Users\user.name\AppData\Local\anaconda3`, if installed at the user level (where `user.name` is your user name), or `C:\ProgramData\anaconda3` if installed for all users.
4. Repeat step 3 with the same path but with `\Scripts\` appended to the end. For example, `C:\ProgramData\anaconda3\Scripts\`.
5. Click Ok (twice) to save and exit Settings.

Close and reopen your command line terminal. Then type `conda init` to initialize Anaconda. Finally, try the `conda --version` command again. It should work now.

### Clone the Repository

Most of the model code is [available on GitHub]({{< meta website.repo-url >}}). To retrieve it:

1. Open a terminal window and change directories (`cd`) to wherever you want the code to reside. For example,

   ```bash
   cd Documents/ageing
   ```

   :::{.callout-important}
   Make sure the directory exists before trying to navigate into it. You cannot move into a non-existent folder.
   :::

2. Clone the repository into the desired directory

   ```bash
   git clone {{< meta website.repo-url >}} .
   ```

   if you want all of the repo contents in the current directory, or 
   
   ```bash
   git clone {{< meta website.repo-url >}}
   ```

   if you want the repo contents to be downloaded into a new subdirectory called `{{< meta repo.name >}}`. This is just personal preference. (Note the difference between the two commands is the dot `.` at the end.)

This model has the option of using a [Segment Anything Model](https://arxiv.org/abs/2408.00714) (SAM) to find the scale within each image. To use this method, one must [download a model checkpoint](https://github.com/facebookresearch/segment-anything?tab=readme-ov-file#model-checkpoints). The [ViT-B model](https://dl.fbaipublicfiles.com/segment_anything/sam_vit_b_01ec64.pth) is recommended. For convenience, consider saving this file in the same directory as model script, for example `~/FATES-BLH-OtolithAgeing/Menhaden Scales Aging/Inference Script`.

### Create a Virtual Environment

Virtual environments are used to manage Python packages. Create a virtual environment specifically for this model. In a terminal window, navigate into the directory containing the model code (from the previous step). Then:

```bash
conda env create --name scaleageing --file=environment.yml
```

This command creates a virtual environment called `scaleageing` and downloads and installs all of the package dependencies listed in the `environment.yml` file contained in the repo.

Note that this virtual environment can be named anything at all, but remember what you call it -- and keep it simple -- because it will be invoked by name each time you use the model.

**Congratulations! Now that your environment is set up -- and this only needs to be done once, the first time -- we are ready to start [using the model](usage.qmd).**
